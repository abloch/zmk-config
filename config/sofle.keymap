#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&msc {
    acceleration-exponent = <2>;      // 0
    time-to-max-speed-ms = <1500>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <1500>;
    acceleration-exponent = <2>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    macros {
        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT_ARROW>;
            label = "BRACES";
        };

        parent: parent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENT";
        };

        brackets: sqbraces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "SQBRACES";
        };

        term: term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(LC(LA(T)))>,
                <&macro_wait_time 30>,
                <&kp LA(NUMBER_3)>;

            label = "TERM";
        };

        arc1: arc1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(NUMBER_1)>,
                <&macro_wait_time 70>,
                <&kp LC(NUMBER_1)>;

            label = "ARC1";
        };

        arc2: arc2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(NUMBER_1)>,
                <&macro_wait_time 70>,
                <&kp LC(NUMBER_2)>;

            label = "ARC2";
        };

        fold: fold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(LEFT_BRACKET)>;
            label = "FOLD";
        };

        foldall: foldall {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(NUMBER_0)>;
            label = "FOLDALL";
        };

        expand: expand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(RIGHT_BRACKET)>;
            label = "EXPAND";
        };

        exitvi: exitvi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LS(Z) &kp LS(Z)>;
            label = "EXITVI";
        };

        m10: m10 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(Q))>;
            label = "M10";
        };
    };

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LGUI>, <&kp LGUI>, <&kp LG(D)>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp LSHFT>, <&sk LSHFT>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LALT>, <&kp LALT>;
        };

        td10: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp L>, <&none>, <&m10>;
        };
    };

    combos {
        compatible = "zmk,combos";

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <18 31>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <31 44>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <29 17>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <16 30>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <30 28>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <43 41>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <34 36>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <47 49>;
        };

        mo3 {
            bindings = <&mo 3>;
            key-positions = <30 29 28>;
        };

        mo4 {
            bindings = <&sl 4>;
            key-positions = <47 48 49>;
        };

        mo2 {
            bindings = <&mo 2>;
            key-positions = <27 28 29 30>;
        };

        to2 {
            bindings = <&to 2>;
            key-positions = <27 28 29>;
        };

        to3 {
            bindings = <&to 3>;
            key-positions = <27 28 29 30>;
        };

        to4 {
            bindings = <&to 4>;
            key-positions = <46 47 48 49>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&bootloader    &none  &none  &none     &none        &none         &kp UP_ARROW     &none      &none        &none      &none    &td10        &bootloader
&kp TAB        &kp Q  &kp W  &kp E     &kp R        &kp T         &kp DOWN_ARROW   &kp Y      &kp U        &kp I      &kp O    &kp P        &mkp MB4
&kp ESCAPE     &kp A  &kp S  &kp D     &kp F        &kp G         &kp LEFT_ARROW   &kp H      &kp J        &kp K      &kp L    &kp BSPC     &kp C_BRI_UP
&kp GRAVE      &kp Z  &kp X  &kp C     &kp V        &kp B         &kp RIGHT_ARROW  &kp N      &kp M        &kp COMMA  &kp DOT  &kp FSLH     &kp LS(GRAVE)
&kp LC(LA(LG(M)))  &none  &none  &td0  &lt 2 SPACE  &td2         &lt 1 ENTER     &kp LCTRL  &td3         &kp C_MUTE  &none    &none
            >;

            sensor-bindings = <&inc_dec_kp LG(LS(Z)) LG(Z)>;
            display-name = "base";
        };

        wp_sym {
            bindings = <
&to 0         &none      &none         &none         &none         &none         &mmv MOVE_UP     &none      &none         &none         &none         &arc1         &arc2
&kp ESC       &parent    &kp SEMI      &kp DQT       &kp SQT       &kp DLLR      &mmv MOVE_DOWN   &kp CARET  &kp LA(N7)    &kp LA(N8)    &kp LA(N9)    &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))
&kp ESC       &parent    &kp DLLR      &kp PRCNT     &kp AMPS      &kp ASTRK     &mmv MOVE_LEFT   &term      &kp LA(N4)    &kp LA(N5)    &kp LA(N6)    &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))
&kp QMARK     &brackets  &kp EXCL      &kp AT        &kp HASH      &kp SEMI      &mmv MOVE_RIGHT  &none      &kp LA(N1)    &kp LA(N2)    &kp LA(N3)    &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))
&none         &none      &none         &kp LGUI      &kp SPACE     &kp LSHFT     &mkp LCLK        &kp LCTRL  &kp RET       &kp LALT      &none         &none
            >;

            display-name = "wp_sym";
            sensor-bindings = <&inc_dec_kp LG(RIGHT) LG(LEFT)>;
        };

        nav {
            bindings = <
&to 0       &kp LG(N1)        &kp LG(N2)        &kp LG(N3)        &none             &none               &mmv MOVE_UP     &foldall   &kp HOME        &kp UP    &kp PG_UP  &kp OSM(MOD_LALT|MOD_LGUI)  &kp C_AL_LOCK
&kp ESC     &kp LC(N1)        &kp LC(N2)        &kp LC(N3)        &kp LC(N4)        &kp LC(N5)          &mmv MOVE_DOWN   &fold      &kp LEFT        &kp DOWN  &kp RIGHT  &kp LA(BSPC)     &kp LC(TAB)
&kp LC(GRAVE)  &none          &none             &none             &kp LS(F4)        &kp F4              &mmv MOVE_LEFT   &expand    &kp END         &kp DEL   &kp PG_DN  &kp LA(DEL)      &kp LC(GRAVE)
&trans      &trans            &trans            &kp LGUI          &kp SPACE         &kp LSHFT           &mmv MOVE_RIGHT  &kp LALT   &kp RET         &kp LCTRL &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        num {
            bindings = <
&to 0        &kp LC(N1)       &kp LC(N2)       &kp LC(N3)       &kp LC(N4)       &none            &mmv MOVE_UP     &none      &kp N9        &kp N8  &kp N7  &kp ASTRK  &none
&to 0        &kp LC(N1)       &kp LC(N2)       &kp LC(N3)       &kp LC(N4)       &none            &mmv MOVE_DOWN   &kp PLUS   &kp N6        &kp N5  &kp N4  &none      &none
&none        &none            &none            &none            &none            &none            &mmv MOVE_LEFT   &kp MINUS  &kp N3        &kp N2  &kp N1  &none      &none
&none        &none            &none            &none            &none            &none            &mmv MOVE_RIGHT  &kp DOT    &kp N0        &none   &none   &none      &none
&trans       &trans           &trans           &trans           &trans           &trans           &mkp LCLK        &kp LCTRL  &trans        &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        fn {
            bindings = <
&to 0            &exitvi    &kp F2     &kp LG(F12)        &kp F12           &kp F9            &mmv MOVE_UP     &kp F5         &kp F10       &kp F11        &kp LS(F11)    &none  &to 4
&to 0            &none      &kp LC(LA(LG(S)))  &kp LS(LG(N4))  &kp LG(F)        &kp LS(LG(F))     &mmv MOVE_DOWN   &kp LS(LG(F5)) &kp F4        &none          &kp LS(LG(L))  &none  &none
&kp CAPS         &none      &none      &kp LS(LG(C))      &kp LG(V)         &kp LC(LA(LG(V))) &mmv MOVE_LEFT   &kp LS(LG(F5)) &none         &none          &none          &none  &none
&none            &none      &none      &trans             &trans            &trans            &mmv MOVE_RIGHT  &kp LALT       &none         &none          &none          &none  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        onetothree {
            if-layers = <1>;
            then-layer = <2>;
        };
    };
};
