#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// #define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
// #define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT

&sk { release-after-ms = <5000>; };

&lt {
    tapping-term-ms = <250>;
    flavor = "balanced";
    hold-while-undecided;
    require-prior-idle-ms = <100>;
};

&sl {
    release-after-ms = <5000>;
    ignore-modifiers;
    lazy;
};

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <750>;
            require-prior-idle-ms = <325>;
            bindings = <&shifted>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;

            label = "homerow_mods";
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 0>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 1>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 2>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 3>;
        };

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RET>, <&bt BT_SEL 4>;
        };

        backlock: backlock {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKLOCK";
            #binding-cells = <0>;
            bindings =
                <&kp BACKSPACE>,
                <&kp BACKSPACE>,
                <&kp LG(LC(Q))>,
                <&none>,
                <&bootloader>;

            tapping-term-ms = <400>;
        };

        gui_raycast: gui_raycast {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_RAYCAST";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LG(D)>;
            tapping-term-ms = <150>;
        };

        caps_lock_word: caps_lock_word {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_LOCK_WORD";
            #binding-cells = <0>;
            bindings = <&kp CAPS>, <&caps_word>;
        };

        bootloader_dance: bootloader_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "BOOTLOADER_DANCE";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&bootloader>;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        arc1: arc1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(LC(LG(A)))>,
                <&macro_wait_time 200>,
                <&kp LC(NUMBER_1)>;

            label = "ARC1";
        };

        arc2: arc2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(LC(LG(A)))>,
                <&macro_wait_time 200>,
                <&kp LC(NUMBER_2)>;

            label = "ARC2";
        };

        tab_left: tab_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(T)>, <&macro_wait_time 80>, <&kp LEFT_BRACKET>;

            label = "TAB_LEFT";
        };

        tab_right: tab_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(T)>, <&macro_wait_time 80>, <&kp RIGHT_BRACKET>;

            label = "TAB_RIGHT";
        };

        unfold: unfold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(LEFT_BRACKET)>;
            label = "UNFOLD";
        };

        fold_all: fold_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(N0)>;
            label = "FOLD_ALL";
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <39 40>;
        };

        tolayer3 {
            bindings = <&tog 3>;
            key-positions = <28 30 29>;
        };

        tolayer4 {
            bindings = <&tog 4>;
            key-positions = <28 30 16>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <29 17>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <16 30>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <30 29>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <43 42>;
        };

        scrollup {
            bindings = <&msc SCRL_UP>;
            timeout-ms = <200>;
            key-positions = <34 18>;
        };

        scrolldown {
            bindings = <&msc SCRL_DOWN>;
            timeout-ms = <200>;
            key-positions = <31 34>;
        };

        tolayer1 {
            bindings = <&to 1>;
            key-positions = <56 57>;
        };

        tolayer2 {
            bindings = <&to 2>;
            key-positions = <60 59>;
        };

        copy {
            bindings = <&kp LG(C)>;
            timeout-ms = <200>;
            key-positions = <34 42>;
        };

        paste {
            bindings = <&kp LG(V)>;
            timeout-ms = <200>;
            key-positions = <34 43>;
        };

        cut {
            bindings = <&kp LG(X)>;
            timeout-ms = <200>;
            key-positions = <34 41>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            timeout-ms = <200>;
            key-positions = <34 40>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            timeout-ms = <200>;
            key-positions = <34 35 40>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <44 31>;
        };

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <31 18>;
        };

        save {
            bindings = <&kp LG(S)>;
            key-positions = <34 28>;
        };

        find {
            bindings = <&kp LG(F)>;
            key-positions = <34 30>;
        };

        findall {
            bindings = <&kp LG(LS(F))>;
            key-positions = <34 30 35>;
        };

        select_all {
            bindings = <&kp LG(LS(L))>;
            key-positions = <34 35 36>;
        };

        foldall_combo {
            bindings = <&fold_all>;
            key-positions = <30 21>;
        };

        unfold_combo {
            bindings = <&unfold>;
            key-positions = <30 22>;
        };

        gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <47 49>;
        };

        question_mark {
            bindings = <&kp QUESTION>;
            key-positions = <43 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2    &kp N3    &kp N4       &kp N5    &kp UP     &kp N6  &kp N7       &kp N8     &kp N9   &kp N0     &backlock
&kp TAB     &as Q      &as W     &as E     &as R        &as T     &kp DOWN   &as Y   &as U        &as I      &as O    &as P      &kt LSHFT
&kp GRAVE   &as A      &as S     &as D     &as F        &as G     &kp LEFT   &as H   &as J        &as K      &as L    &kp BSPC   &none
&kp LCTRL   &as Z      &as X     &as C     &as V        &as B     &kp RIGHT  &as N   &as M        &kp COMMA  &kp DOT  &kp SLASH  &mkp MB4
&kp C_MUTE  &kp LSHFT  &kp LALT  &kp LGUI  &lt 1 SPACE  &none     &kp RET    &none   &lt 2 SPACE  &kp RET    &none    &kp TILDE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "base";
        };

        layer_1 {
            bindings = <
&to 0         &kp F1          &kp F2        &kp F3        &kp F4      &kp F5       &mmv MOVE_UP     &kp F6  &kp F7     &kp F8          &kp F9     &kp F10     &kp LG(LC(Q))
&kp TAB       &kp LBRC        &kp RBRC      &kp COLON     &kp DQT     &kp SQT      &mmv MOVE_DOWN   &none   &kp HOME   &kp UP          &kp PG_UP  &kp F11     &kp F12
&kp QUESTION  &kp LPAR        &kp RPAR      &kp PLUS      &kp EXCL    &kp PIPE     &mmv MOVE_LEFT   &none   &kp LEFT   &kp DOWN        &kp RIGHT  &kp BSPC    &none
&kp LG(Z)     &kp LT          &kp GT        &kp EQUAL     &kp DOLLAR  &kp ASTRK    &mmv MOVE_RIGHT  &none   &kp END    &kp DEL         &kp PG_DN  &none       &mkp MB5
&kp C_PP      &sk LEFT_SHIFT  &sk LEFT_ALT  &sk LEFT_GUI  &kp SPACE   &none        &mkp LCLK        &none   &kp SPACE  &sk LEFT_SHIFT  &tab_left  &tab_right
            >;

            display-name = "symb";
            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        layer_2 {
            bindings = <
&to 0      &kp LS(N1)      &kp LS(N2)    &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &mmv MOVE_UP     &kp LS(N6)         &kp LS(N7)        &kp LS(N8)        &kp LS(N9)        &kp LS(N0)        &kp LG(LC(Q))
&kp TAB    &kp LBRC        &kp RBRC      &kp COLON   &kp DQT     &kp SQT       &mmv MOVE_DOWN   &none              &kp LA(N7)        &kp LA(N8)        &kp LA(N9)        &bootloader       &none
&kp QMARK  &kp LPAR        &kp RPAR      &kp PLUS    &kp EXCL    &kp PIPE      &mmv MOVE_LEFT   &kp LA(LC(LG(T)))  &kp LA(NUMBER_4)  &kp LA(N5)        &kp LA(NUMBER_6)  &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))
&kp LG(Z)  &kp LBKT        &kp RBKT      &kp EQUAL   &kp DOLLAR  &kp STAR      &mmv MOVE_RIGHT  &none              &kp LA(N1)        &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &none             &mkp MB5
&kp C_PP   &kt LEFT_SHIFT  &kt LEFT_ALT  &kp LG(D)   &kp SPACE   &none         &mkp RCLK        &none              &kp SPACE         &kp LEFT_SHIFT    &rgb_ug RGB_EFF   &rgb_ug RGB_TOG
            >;

            display-name = "wsps";
            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        np_zlj {
            bindings = <
&to 0   &none   &none   &none   &none      &none        &none  &none  &none      &none   &none         &none          &none
&none   &none   &none   &none   &none      &kp LA(T)    &none  &none  &kp N7     &kp N8  &kp N9        &kp LA(P)      &tab_right
&none   &none   &none   &none   &none      &none        &none  &none  &kp N4     &kp N5  &kp N6        &kp LA(UP)     &kp LA(EQUAL)
&trans  &none   &none   &none   &none      &none        &none  &none  &kp N1     &kp N2  &kp N3        &kp LA(DOWN)   &kp LA(MINUS)
&none   &trans  &trans  &trans  &kp SPACE  &none        &none  &none  &kp SPACE  &kp N0  &kp LA(LEFT)  &kp LA(RIGHT)
            >;

            label = "np/zlj";
        };

        layer_4 {
            bindings = <
&to 0   &trans  &trans  &trans  &trans          &trans       &msc SCRL_UP    &trans  &trans    &trans          &trans           &trans         &trans
&trans  &trans  &trans  &trans  &trans          &kp LA(T)    &msc SCRL_DOWN  &trans  &kp HOME  &kp UP_ARROW    &kp PG_UP        &kp LA(P)      &trans
&trans  &trans  &trans  &trans  &msc SCRL_UP    &trans       &trans          &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LS(LG(L))  &kp LA(EQUAL)
&trans  &trans  &trans  &trans  &msc SCRL_DOWN  &trans       &trans          &trans  &kp END   &kp DEL         &kp PAGE_DOWN    &trans         &kp LA(MINUS)
&trans  &trans  &trans  &trans  &trans          &none        &trans          &none   &trans    &trans          &trans           &trans
            >;

            label = "arrows";
        };
    };
};
