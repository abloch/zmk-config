#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// #define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
// #define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT

&sk { release-after-ms = <5000>; };

&lt {
    tapping-term-ms = <50>;
    flavor = "balanced";
    hold-while-undecided;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <100>;
};

&sl {
    release-after-ms = <5000>;
    ignore-modifiers;
    lazy;
};

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;

            label = "homerow_mods";
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 0>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 1>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 2>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bt BT_SEL 3>;
        };

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RET>, <&bt BT_SEL 4>;
        };

        backlock: backlock {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKLOCK";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp BACKSPACE>, <&kp LG(LC(Q))>;
        };

        gui_raycast: gui_raycast {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_RAYCAST";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LG(D)>;

            tapping-term-ms = <150>;
        };

        colon_semicolon: colon_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "COLON_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };

        caps_lock_word: caps_lock_word {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_LOCK_WORD";
            #binding-cells = <0>;
            bindings = <&kp CAPS>, <&caps_word>;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        arc1: arc1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(LC(LG(A)))>,
                <&macro_wait_time 200>,
                <&kp LC(NUMBER_1)>;

            label = "ARC1";
        };

        arc2: arc2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(LC(LG(A)))>,
                <&macro_wait_time 200>,
                <&kp LC(NUMBER_2)>;

            label = "ARC2";
        };

        tab_left: tab_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(T)>, <&macro_wait_time 80>, <&kp LEFT_BRACKET>;

            label = "TAB_LEFT";
        };

        tab_right: tab_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(T)>, <&macro_wait_time 80>, <&kp RIGHT_BRACKET>;

            label = "TAB_RIGHT";
        };
    };

    combos {
        compatible = "zmk,combos";

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <39 40>;
        };

        bootloader_right {
            bindings = <&bootloader>;
            key-positions = <51 50>;
        };

        to_layer3_onekey {
            bindings = <&sl 3>;
            key-positions = <28 16 30>;
        };

        stay_in_layer3 {
            bindings = <&to 3>;
            key-positions = <28 16 30 27>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <42 30>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <29 43>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <30 29>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <43 42>;
        };

        to_layer4 {
            bindings = <&to 4>;
            key-positions = <30 29 28>;
        };

        scrollup {
            bindings = <&msc SCRL_UP>;
            key-positions = <22 29>;
        };

        scrolldown {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <35 29>;
        };

        tolayer1 {
            bindings = <&to 1>;
            key-positions = <56 57>;
        };

        tolayer2 {
            bindings = <&to 2>;
            key-positions = <60 59>;
        };

        tobaselayer {
            bindings = <&to 0>;
            key-positions = <59 57>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2    &kp N3    &kp N4    &kp N5         &kp UP     &kp N6       &kp N7   &kp N8     &kp N9     &kp N0     &backlock
&kp TAB     &kp Q      &kp W     &kp E     &kp R     &kp T          &kp DOWN   &kp Y        &kp U    &kp I      &kp O      &kp P      &kp CLCK
&kp GRAVE   &kp A      &kp S     &kp D     &kp F     &kp G          &kp LEFT   &kp H        &kp J    &kp K      &kp L      &kp BSPC   &none
&kp LCTRL   &kp Z      &kp X     &kp C     &kp V     &kp B          &kp RIGHT  &kp N        &kp M    &kp COMMA  &kp DOT    &kp SLASH  &mkp MB4
&kp C_MUTE  &sk LSHFT  &sk LALT  &kp LGUI  &kp LGUI  &lt 1 SPACE    &kp RET    &lt 2 SPACE  &kp RET  &kp RET    &kp MINUS  &kp TILDE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "base";
        };

        layer_1 {
            bindings = <
&to 0         &kp F1     &kp F2     &kp F3            &kp F4      &kp F5       &mmv MOVE_UP     &kp F6     &kp F7          &kp F8          &kp F9     &kp F10   &kp LG(LC(Q))
&kp TAB       &kp LBRC   &kp RBRC   &colon_semicolon  &kp DQT     &kp SQT      &mmv MOVE_DOWN   &none      &kp HOME        &kp UP          &kp PG_UP  &kp F11   &kp F12
&kp QUESTION  &kp LPAR   &kp RPAR   &kp PLUS          &kp EXCL    &kp PIPE     &mmv MOVE_LEFT   &none      &kp LEFT        &kp DOWN        &kp RIGHT  &kp BSPC  &none
&kp LG(Z)     &kp LT     &kp GT     &kp EQUAL         &kp DOLLAR  &kp ASTRK    &mmv MOVE_RIGHT  &none      &kp END         &kp DEL         &kp PG_DN  &none     &mkp MB5
&kp C_PP      &kp LG(X)  &kp LG(C)  &kp LG(V)         &kp LG(V)   &kp SPACE    &mkp LCLK        &kp SPACE  &sk LEFT_SHIFT  &sk LEFT_SHIFT  &none      &none
            >;

            display-name = "symb";
            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        layer_2 {
            bindings = <
&to 0      &kp LS(N1)  &kp LS(N2)  &kp LS(N3)        &kp LS(N4)  &kp LS(N5)    &mmv MOVE_UP     &kp LS(N6)         &kp LS(N7)        &kp LS(N8)        &kp LS(N9)         &kp LS(N0)       &kp LG(LC(Q))
&kp TAB    &kp LBRC    &kp RBRC    &colon_semicolon  &kp DQT     &kp SQT       &mmv MOVE_DOWN   &kp LA(N6)         &kp LA(N7)        &kp LA(N8)        &kp LA(N9)         &kp LA(N0)       &none
&kp QMARK  &kp LPAR    &kp RPAR    &kp PLUS          &kp EXCL    &kp PIPE      &mmv MOVE_LEFT   &kp LA(LC(LG(T)))  &kp LA(LC(LEFT))  &sk LA(LC(LGUI))  &kp LC(LA(RIGHT))  &kp BACKSPACE    &none
&kp LG(Z)  &kp LBKT    &kp RBKT    &kp EQUAL         &kp DOLLAR  &kp STAR      &mmv MOVE_RIGHT  &kp LA(N1)         &kp LA(N2)        &kp LA(N3)        &kp LA(N4)         &kp LA(N5)       &mkp MB5
&kp C_PP   &kp LG(X)   &kp LG(C)   &kp LG(V)         &kp LG(V)   &kp SPACE     &mkp RCLK        &kp SPACE          &sk LEFT_SHIFT    &sk LEFT_SHIFT    &rgb_ug RGB_EFF    &rgb_ug         to3 {
            bindings = <&to 3>;
            key-positions = <28 16 30 27>;
        };
RGB_TOG
            >;

            display-name = "wsps";
            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        np_zlj {
            bindings = <
&to 0   &none  &none   &none   &none   &none        &none  &none      &none   &none   &none         &none          &none
&none   &none  &none   &none   &none   &none        &none  &none      &kp N7  &kp N8  &kp N9        &tab_left      &tab_right
&none   &none  &none   &none   &none   &none        &none  &none      &kp N4  &kp N5  &kp N6        &kp LA(UP)     &kp LA(EQUAL)
&trans  &none  &none   &none   &none   &none        &none  &none      &kp N1  &kp N2  &kp N3        &kp LA(DOWN)   &kp LA(MINUS)
&none   &none  &trans  &trans  &trans  &kp SPACE    &none  &kp SPACE  &none   &kp N0  &kp LA(LEFT)  &kp LA(RIGHT)
            >;

            label = "np/zlj";
        };

        layer_4 {
            bindings = <
&to 0          &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans    &trans          &trans           &trans         &trans
&trans         &trans  &trans  &trans  &trans  &kp LA(T)         &trans  &trans  &kp HOME  &kp UP_ARROW    &kp PG_UP        &kp LA(P)      &trans
&trans         &trans  &trans  &trans  &trans  &trans            &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LS(LG(L))  &kp LA(EQUAL)
&kp LS(LG(Z))  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &kp END   &kp DEL         &kp PAGE_DOWN    &trans         &kp LA(MINUS)
&trans         &trans  &trans  &trans  &trans  &kp LEFT_SHIFT    &trans  &trans  &trans    &trans          &trans           &trans
            >;
        };
    };
};
